/**
 * Professional AI Feedback Display
 * 
 * Shows advanced AI-generated golf coaching feedback with professional insights,
 * specific drills, and personalized recommendations.
 */

import React, { useState } from 'react';
import { ProfessionalAIFeedback } from '@/lib/ai-golf-feedback';

interface ProfessionalAIFeedbackProps {
  feedback: ProfessionalAIFeedback | null;
  className?: string;
}

export default function ProfessionalAIFeedback({ feedback, className = '' }: ProfessionalAIFeedbackProps) {
  const [expandedSections, setExpandedSections] = useState({
    strengths: true,
    improvements: true,
    drills: true,
    insights: false
  });

  if (!feedback) return null;

  const toggleSection = (section: keyof typeof expandedSections) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const formatConfidence = (confidence: number) => {
    const percentage = Math.round(confidence * 100);
    if (percentage >= 90) return { text: 'Very High', color: 'text-green-600', bg: 'bg-green-100' };
    if (percentage >= 80) return { text: 'High', color: 'text-blue-600', bg: 'bg-blue-100' };
    if (percentage >= 70) return { text: 'Medium', color: 'text-yellow-600', bg: 'bg-yellow-100' };
    return { text: 'Low', color: 'text-orange-600', bg: 'bg-orange-100' };
  };

  const confidence = formatConfidence(feedback.confidence);

  return (
    <div className={`professional-ai-feedback ${className}`}>
      <div className="bg-gradient-to-r from-purple-50 to-indigo-50 rounded-xl p-6 mb-6 border border-purple-200">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center">
            <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-indigo-500 rounded-full flex items-center justify-center mr-4">
              <span className="text-2xl">ü§ñ</span>
            </div>
            <div>
              <h3 className="text-2xl font-bold text-gray-800">Professional AI Coach</h3>
              <p className="text-gray-600">Advanced swing analysis with personalized coaching</p>
            </div>
          </div>
          <div className="text-right">
            <div className={`px-3 py-1 rounded-full text-sm font-medium ${confidence.bg} ${confidence.color}`}>
              Confidence: {confidence.text}
            </div>
            <div className="text-xs text-gray-500 mt-1">
              Generated by {feedback.model} ‚Ä¢ ${feedback.cost.toFixed(3)}
            </div>
          </div>
        </div>

        {/* Overall Assessment */}
        <div className="bg-white rounded-lg p-4 mb-6 border-l-4 border-purple-500">
          <h4 className="font-semibold text-gray-800 mb-2 flex items-center">
            <span className="w-2 h-2 bg-purple-500 rounded-full mr-2"></span>
            Overall Assessment
          </h4>
          <p className="text-gray-700 leading-relaxed">{feedback.overallAssessment}</p>
        </div>

        {/* Key Tip */}
        {feedback.keyTip && (
          <div className="bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg p-4 mb-6 border border-blue-200">
            <h4 className="font-semibold text-blue-800 mb-2 flex items-center">
              <span className="text-xl mr-2">üí°</span>
              Key Tip for Maximum Impact
            </h4>
            <p className="text-blue-700 font-medium">{feedback.keyTip}</p>
          </div>
        )}

        {/* Strengths */}
        {feedback.strengths && feedback.strengths.length > 0 && (
          <div className="bg-white rounded-lg p-4 mb-4 border border-green-200">
            <button
              onClick={() => toggleSection('strengths')}
              className="w-full flex items-center justify-between text-left"
            >
              <h4 className="font-semibold text-green-800 flex items-center">
                <span className="text-xl mr-2">‚úÖ</span>
                Strengths ({feedback.strengths.length})
              </h4>
              <span className="text-gray-500">
                {expandedSections.strengths ? '‚ñº' : '‚ñ∂'}
              </span>
            </button>
            {expandedSections.strengths && (
              <div className="mt-3 space-y-2">
                {feedback.strengths.map((strength, index) => (
                  <div key={index} className="flex items-start">
                    <span className="w-2 h-2 bg-green-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                    <p className="text-gray-700">{strength}</p>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Areas for Improvement */}
        {feedback.improvements && feedback.improvements.length > 0 && (
          <div className="bg-white rounded-lg p-4 mb-4 border border-orange-200">
            <button
              onClick={() => toggleSection('improvements')}
              className="w-full flex items-center justify-between text-left"
            >
              <h4 className="font-semibold text-orange-800 flex items-center">
                <span className="text-xl mr-2">üéØ</span>
                Areas for Improvement ({feedback.improvements.length})
              </h4>
              <span className="text-gray-500">
                {expandedSections.improvements ? '‚ñº' : '‚ñ∂'}
              </span>
            </button>
            {expandedSections.improvements && (
              <div className="mt-3 space-y-2">
                {feedback.improvements.map((improvement, index) => (
                  <div key={index} className="flex items-start">
                    <span className="w-2 h-2 bg-orange-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                    <p className="text-gray-700">{improvement}</p>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Recommended Drills */}
        {feedback.drills && feedback.drills.length > 0 && (
          <div className="bg-white rounded-lg p-4 mb-4 border border-blue-200">
            <button
              onClick={() => toggleSection('drills')}
              className="w-full flex items-center justify-between text-left"
            >
              <h4 className="font-semibold text-blue-800 flex items-center">
                <span className="text-xl mr-2">üèåÔ∏è‚Äç‚ôÇÔ∏è</span>
                Recommended Drills ({feedback.drills.length})
              </h4>
              <span className="text-gray-500">
                {expandedSections.drills ? '‚ñº' : '‚ñ∂'}
              </span>
            </button>
            {expandedSections.drills && (
              <div className="mt-3 space-y-3">
                {feedback.drills.map((drill, index) => (
                  <div key={index} className="bg-blue-50 rounded-lg p-3">
                    <div className="flex items-start">
                      <span className="w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3 flex-shrink-0">
                        {index + 1}
                      </span>
                      <p className="text-gray-700">{drill}</p>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Professional Insights */}
        {feedback.professionalInsight && (
          <div className="bg-white rounded-lg p-4 mb-4 border border-purple-200">
            <button
              onClick={() => toggleSection('insights')}
              className="w-full flex items-center justify-between text-left"
            >
              <h4 className="font-semibold text-purple-800 flex items-center">
                <span className="text-xl mr-2">üß†</span>
                Professional Insights
              </h4>
              <span className="text-gray-500">
                {expandedSections.insights ? '‚ñº' : '‚ñ∂'}
              </span>
            </button>
            {expandedSections.insights && (
              <div className="mt-3">
                <p className="text-gray-700 leading-relaxed">{feedback.professionalInsight}</p>
              </div>
            )}
          </div>
        )}

        {/* Next Steps */}
        {feedback.nextSteps && feedback.nextSteps.length > 0 && (
          <div className="bg-gradient-to-r from-gray-50 to-slate-50 rounded-lg p-4 border border-gray-200">
            <h4 className="font-semibold text-gray-800 mb-3 flex items-center">
              <span className="text-xl mr-2">üìã</span>
              Next Steps
            </h4>
            <div className="space-y-2">
              {feedback.nextSteps.map((step, index) => (
                <div key={index} className="flex items-start">
                  <span className="w-6 h-6 bg-gray-500 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3 flex-shrink-0">
                    {index + 1}
                  </span>
                  <p className="text-gray-700">{step}</p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Footer */}
        <div className="mt-6 pt-4 border-t border-gray-200">
          <div className="flex items-center justify-between text-sm text-gray-500">
            <div className="flex items-center">
              <span className="mr-2">‚ö°</span>
              Generated in real-time
            </div>
            <div className="flex items-center">
              <span className="mr-2">üîí</span>
              Your data is secure and private
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
